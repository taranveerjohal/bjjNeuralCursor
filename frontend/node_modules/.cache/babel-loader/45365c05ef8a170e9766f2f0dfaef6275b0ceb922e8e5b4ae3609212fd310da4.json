{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tjoha\\\\Desktop\\\\cursor\\\\bjj-vision\\\\frontend\\\\src\\\\components\\\\PoseTesting.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PoseTesting = () => {\n  _s();\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [poseNet, setPoseNet] = useState(null);\n  const [neuralNetwork, setNeuralNetwork] = useState(null);\n  const [isModelLoaded, setIsModelLoaded] = useState(false);\n  const [isDetecting, setIsDetecting] = useState(false);\n  const [currentPose, setCurrentPose] = useState(null);\n  const [prediction, setPrediction] = useState(null);\n  const [isClassifying, setIsClassifying] = useState(false);\n  const [logs, setLogs] = useState([]);\n\n  // Initialize models\n  useEffect(() => {\n    const initModels = async () => {\n      try {\n        if (window.ml5) {\n          // Initialize MoveNet\n          const poseModel = await window.ml5.pose('MoveNet', {\n            modelType: 'lightning',\n            enableSmoothing: true,\n            enableTracking: true,\n            minPoseScore: 0.3\n          });\n          setPoseNet(poseModel);\n\n          // Try to load existing neural network model\n          try {\n            const nn = window.ml5.neuralNetwork('bjj-pose-model', () => {\n              setNeuralNetwork(nn);\n              setIsModelLoaded(true);\n              addLog('Trained model loaded successfully');\n            }, () => {\n              addLog('No trained model found. Please train a model first.');\n              setIsModelLoaded(false);\n            });\n          } catch (error) {\n            addLog('Error loading trained model: ' + error);\n            setIsModelLoaded(false);\n          }\n        }\n      } catch (error) {\n        console.error('Error loading models:', error);\n        addLog('Error loading models: ' + error);\n      }\n    };\n    initModels();\n  }, []);\n  const addLog = message => {\n    const timestamp = new Date().toLocaleTimeString();\n    setLogs(prev => [...prev, `[${timestamp}] ${message}`]);\n  };\n\n  // Start video stream\n  const startVideo = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          width: 640,\n          height: 480,\n          facingMode: 'user'\n        }\n      });\n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n        videoRef.current.play();\n        setIsDetecting(true);\n        addLog('Video stream started');\n      }\n    } catch (error) {\n      console.error('Error accessing webcam:', error);\n      addLog('Error accessing webcam: ' + error);\n    }\n  };\n\n  // Stop video stream\n  const stopVideo = () => {\n    if (videoRef.current && videoRef.current.srcObject) {\n      const stream = videoRef.current.srcObject;\n      stream.getTracks().forEach(track => track.stop());\n      videoRef.current.srcObject = null;\n      setIsDetecting(false);\n      setCurrentPose(null);\n      setPrediction(null);\n      addLog('Video stream stopped');\n    }\n  };\n\n  // Draw skeleton on canvas\n  const drawSkeleton = (ctx, pose) => {\n    const keypoints = pose.keypoints;\n    const connections = [['nose', 'leftEye'], ['nose', 'rightEye'], ['leftEye', 'leftEar'], ['rightEye', 'rightEar'], ['leftShoulder', 'rightShoulder'], ['leftShoulder', 'leftElbow'], ['rightShoulder', 'rightElbow'], ['leftElbow', 'leftWrist'], ['rightElbow', 'rightWrist'], ['leftShoulder', 'leftHip'], ['rightShoulder', 'rightHip'], ['leftHip', 'rightHip'], ['leftHip', 'leftKnee'], ['rightHip', 'rightKnee'], ['leftKnee', 'leftAnkle'], ['rightKnee', 'rightAnkle']];\n\n    // Draw connections\n    ctx.strokeStyle = '#00ff00';\n    ctx.lineWidth = 2;\n    connections.forEach(([start, end]) => {\n      const startPoint = keypoints.find(kp => kp.name === start);\n      const endPoint = keypoints.find(kp => kp.name === end);\n      if (startPoint && endPoint && startPoint.score > 0.3 && endPoint.score > 0.3) {\n        ctx.beginPath();\n        ctx.moveTo(startPoint.x, startPoint.y);\n        ctx.lineTo(endPoint.x, endPoint.y);\n        ctx.stroke();\n      }\n    });\n\n    // Draw keypoints\n    keypoints.forEach(keypoint => {\n      if (keypoint.score > 0.3) {\n        ctx.fillStyle = keypoint.score > 0.7 ? '#ff0000' : '#ffaa00';\n        ctx.beginPath();\n        ctx.arc(keypoint.x, keypoint.y, 4, 0, 2 * Math.PI);\n        ctx.fill();\n      }\n    });\n  };\n\n  // Classify pose\n  const classifyPose = async pose => {\n    if (!neuralNetwork || !isClassifying) {\n      return;\n    }\n    try {\n      const keypoints = pose.keypoints;\n      const input = keypoints.flatMap(kp => [kp.x, kp.y]); // Flatten to 34 values\n\n      const result = await neuralNetwork.classify(input);\n      if (result && result.length > 0) {\n        const topResult = result[0];\n        setPrediction({\n          label: topResult.label,\n          confidence: topResult.confidence\n        });\n      }\n    } catch (error) {\n      console.error('Error classifying pose:', error);\n    }\n  };\n\n  // Pose detection and classification loop\n  useEffect(() => {\n    let animationId;\n    const detectAndClassify = async () => {\n      if (!poseNet || !videoRef.current || !canvasRef.current) {\n        return;\n      }\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      if (!ctx || video.readyState !== 4) {\n        animationId = requestAnimationFrame(detectAndClassify);\n        return;\n      }\n\n      // Set canvas size\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n\n      // Clear canvas\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      try {\n        // Detect poses\n        const detectedPoses = await poseNet.predict(video);\n        if (detectedPoses.length > 0) {\n          const pose = detectedPoses[0]; // Use first detected pose\n          setCurrentPose(pose);\n\n          // Draw skeleton\n          drawSkeleton(ctx, pose);\n\n          // Classify pose if model is loaded and classification is enabled\n          if (isModelLoaded && isClassifying && pose.score > 0.5) {\n            await classifyPose(pose);\n          }\n        } else {\n          setCurrentPose(null);\n          setPrediction(null);\n        }\n      } catch (error) {\n        console.error('Error detecting pose:', error);\n      }\n      animationId = requestAnimationFrame(detectAndClassify);\n    };\n    if (isDetecting) {\n      detectAndClassify();\n    }\n    return () => {\n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n    };\n  }, [poseNet, isDetecting, isModelLoaded, isClassifying]);\n\n  // Toggle classification\n  const toggleClassification = () => {\n    setIsClassifying(!isClassifying);\n    if (!isClassifying) {\n      addLog('Pose classification started');\n    } else {\n      addLog('Pose classification stopped');\n      setPrediction(null);\n    }\n  };\n\n  // Reset classification\n  const resetClassification = () => {\n    setPrediction(null);\n    addLog('Classification reset');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"component-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Pose Testing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-display\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Models: \", isModelLoaded ? 'Loaded' : 'Not Found']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Detection: \", isDetecting ? 'Active' : 'Inactive']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Classification: \", isClassifying ? 'Active' : 'Inactive']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this), currentPose && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Pose Confidence: \", Math.round(currentPose.score * 100), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [!isDetecting ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: startVideo,\n        children: \"Start Detection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-danger\",\n        onClick: stopVideo,\n        children: \"Stop Detection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 11\n      }, this), isModelLoaded && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `btn ${isClassifying ? 'btn-danger' : 'btn-success'}`,\n        onClick: toggleClassification,\n        disabled: !isDetecting,\n        children: isClassifying ? 'Stop Classification' : 'Start Classification'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary\",\n        onClick: resetClassification,\n        disabled: !isClassifying,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: videoRef,\n        className: \"video-element\",\n        autoPlay: true,\n        muted: true,\n        playsInline: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        className: \"canvas-overlay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }, this), prediction && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pose-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pose-label\",\n        children: [\"Detected: \", prediction.label]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"confidence-score\",\n        children: [Math.round(prediction.confidence * 100), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 9\n    }, this), !isModelLoaded && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-display\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"No Trained Model Found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please go to the \\\"Pose Training\\\" tab to train a model first.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"log-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Activity Log\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this), logs.map((log, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: log\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 265,\n    columnNumber: 5\n  }, this);\n};\n_s(PoseTesting, \"44lPPC2tMM6Xa9k/PN/w+ipXDU4=\");\n_c = PoseTesting;\nexport default PoseTesting;\nvar _c;\n$RefreshReg$(_c, \"PoseTesting\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","PoseTesting","_s","videoRef","canvasRef","poseNet","setPoseNet","neuralNetwork","setNeuralNetwork","isModelLoaded","setIsModelLoaded","isDetecting","setIsDetecting","currentPose","setCurrentPose","prediction","setPrediction","isClassifying","setIsClassifying","logs","setLogs","initModels","window","ml5","poseModel","pose","modelType","enableSmoothing","enableTracking","minPoseScore","nn","addLog","error","console","message","timestamp","Date","toLocaleTimeString","prev","startVideo","stream","navigator","mediaDevices","getUserMedia","video","width","height","facingMode","current","srcObject","play","stopVideo","getTracks","forEach","track","stop","drawSkeleton","ctx","keypoints","connections","strokeStyle","lineWidth","start","end","startPoint","find","kp","name","endPoint","score","beginPath","moveTo","x","y","lineTo","stroke","keypoint","fillStyle","arc","Math","PI","fill","classifyPose","input","flatMap","result","classify","length","topResult","label","confidence","animationId","detectAndClassify","canvas","getContext","readyState","requestAnimationFrame","videoWidth","videoHeight","clearRect","detectedPoses","predict","cancelAnimationFrame","toggleClassification","resetClassification","className","children","fileName","_jsxFileName","lineNumber","columnNumber","round","onClick","disabled","ref","autoPlay","muted","playsInline","map","log","index","_c","$RefreshReg$"],"sources":["C:/Users/tjoha/Desktop/cursor/bjj-vision/frontend/src/components/PoseTesting.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\n\r\ninterface PoseKeypoint {\r\n  x: number;\r\n  y: number;\r\n  score: number;\r\n  name: string;\r\n}\r\n\r\ninterface Pose {\r\n  keypoints: PoseKeypoint[];\r\n  score: number;\r\n}\r\n\r\ninterface Prediction {\r\n  label: string;\r\n  confidence: number;\r\n}\r\n\r\ndeclare global {\r\n  interface Window {\r\n    ml5: any;\r\n  }\r\n}\r\n\r\nconst PoseTesting: React.FC = () => {\r\n  const videoRef = useRef<HTMLVideoElement>(null);\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const [poseNet, setPoseNet] = useState<any>(null);\r\n  const [neuralNetwork, setNeuralNetwork] = useState<any>(null);\r\n  const [isModelLoaded, setIsModelLoaded] = useState(false);\r\n  const [isDetecting, setIsDetecting] = useState(false);\r\n  const [currentPose, setCurrentPose] = useState<Pose | null>(null);\r\n  const [prediction, setPrediction] = useState<Prediction | null>(null);\r\n  const [isClassifying, setIsClassifying] = useState(false);\r\n  const [logs, setLogs] = useState<string[]>([]);\r\n\r\n  // Initialize models\r\n  useEffect(() => {\r\n    const initModels = async () => {\r\n      try {\r\n        if (window.ml5) {\r\n          // Initialize MoveNet\r\n          const poseModel = await window.ml5.pose('MoveNet', {\r\n            modelType: 'lightning',\r\n            enableSmoothing: true,\r\n            enableTracking: true,\r\n            minPoseScore: 0.3\r\n          });\r\n          setPoseNet(poseModel);\r\n\r\n          // Try to load existing neural network model\r\n          try {\r\n            const nn = window.ml5.neuralNetwork('bjj-pose-model', () => {\r\n              setNeuralNetwork(nn);\r\n              setIsModelLoaded(true);\r\n              addLog('Trained model loaded successfully');\r\n            }, () => {\r\n              addLog('No trained model found. Please train a model first.');\r\n              setIsModelLoaded(false);\r\n            });\r\n          } catch (error) {\r\n            addLog('Error loading trained model: ' + error);\r\n            setIsModelLoaded(false);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading models:', error);\r\n        addLog('Error loading models: ' + error);\r\n      }\r\n    };\r\n\r\n    initModels();\r\n  }, []);\r\n\r\n  const addLog = (message: string) => {\r\n    const timestamp = new Date().toLocaleTimeString();\r\n    setLogs(prev => [...prev, `[${timestamp}] ${message}`]);\r\n  };\r\n\r\n  // Start video stream\r\n  const startVideo = async () => {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({\r\n        video: {\r\n          width: 640,\r\n          height: 480,\r\n          facingMode: 'user'\r\n        }\r\n      });\r\n      \r\n      if (videoRef.current) {\r\n        videoRef.current.srcObject = stream;\r\n        videoRef.current.play();\r\n        setIsDetecting(true);\r\n        addLog('Video stream started');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error accessing webcam:', error);\r\n      addLog('Error accessing webcam: ' + error);\r\n    }\r\n  };\r\n\r\n  // Stop video stream\r\n  const stopVideo = () => {\r\n    if (videoRef.current && videoRef.current.srcObject) {\r\n      const stream = videoRef.current.srcObject as MediaStream;\r\n      stream.getTracks().forEach(track => track.stop());\r\n      videoRef.current.srcObject = null;\r\n      setIsDetecting(false);\r\n      setCurrentPose(null);\r\n      setPrediction(null);\r\n      addLog('Video stream stopped');\r\n    }\r\n  };\r\n\r\n  // Draw skeleton on canvas\r\n  const drawSkeleton = (ctx: CanvasRenderingContext2D, pose: Pose) => {\r\n    const keypoints = pose.keypoints;\r\n    \r\n    const connections = [\r\n      ['nose', 'leftEye'], ['nose', 'rightEye'],\r\n      ['leftEye', 'leftEar'], ['rightEye', 'rightEar'],\r\n      ['leftShoulder', 'rightShoulder'],\r\n      ['leftShoulder', 'leftElbow'], ['rightShoulder', 'rightElbow'],\r\n      ['leftElbow', 'leftWrist'], ['rightElbow', 'rightWrist'],\r\n      ['leftShoulder', 'leftHip'], ['rightShoulder', 'rightHip'],\r\n      ['leftHip', 'rightHip'],\r\n      ['leftHip', 'leftKnee'], ['rightHip', 'rightKnee'],\r\n      ['leftKnee', 'leftAnkle'], ['rightKnee', 'rightAnkle']\r\n    ];\r\n\r\n    // Draw connections\r\n    ctx.strokeStyle = '#00ff00';\r\n    ctx.lineWidth = 2;\r\n    \r\n    connections.forEach(([start, end]) => {\r\n      const startPoint = keypoints.find(kp => kp.name === start);\r\n      const endPoint = keypoints.find(kp => kp.name === end);\r\n      \r\n      if (startPoint && endPoint && startPoint.score > 0.3 && endPoint.score > 0.3) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(startPoint.x, startPoint.y);\r\n        ctx.lineTo(endPoint.x, endPoint.y);\r\n        ctx.stroke();\r\n      }\r\n    });\r\n\r\n    // Draw keypoints\r\n    keypoints.forEach(keypoint => {\r\n      if (keypoint.score > 0.3) {\r\n        ctx.fillStyle = keypoint.score > 0.7 ? '#ff0000' : '#ffaa00';\r\n        ctx.beginPath();\r\n        ctx.arc(keypoint.x, keypoint.y, 4, 0, 2 * Math.PI);\r\n        ctx.fill();\r\n      }\r\n    });\r\n  };\r\n\r\n  // Classify pose\r\n  const classifyPose = async (pose: Pose) => {\r\n    if (!neuralNetwork || !isClassifying) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const keypoints = pose.keypoints;\r\n      const input = keypoints.flatMap(kp => [kp.x, kp.y]); // Flatten to 34 values\r\n      \r\n      const result = await neuralNetwork.classify(input);\r\n      \r\n      if (result && result.length > 0) {\r\n        const topResult = result[0];\r\n        setPrediction({\r\n          label: topResult.label,\r\n          confidence: topResult.confidence\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error classifying pose:', error);\r\n    }\r\n  };\r\n\r\n  // Pose detection and classification loop\r\n  useEffect(() => {\r\n    let animationId: number;\r\n\r\n    const detectAndClassify = async () => {\r\n      if (!poseNet || !videoRef.current || !canvasRef.current) {\r\n        return;\r\n      }\r\n\r\n      const video = videoRef.current;\r\n      const canvas = canvasRef.current;\r\n      const ctx = canvas.getContext('2d');\r\n\r\n      if (!ctx || video.readyState !== 4) {\r\n        animationId = requestAnimationFrame(detectAndClassify);\r\n        return;\r\n      }\r\n\r\n      // Set canvas size\r\n      canvas.width = video.videoWidth;\r\n      canvas.height = video.videoHeight;\r\n\r\n      // Clear canvas\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n      try {\r\n        // Detect poses\r\n        const detectedPoses = await poseNet.predict(video);\r\n        \r\n        if (detectedPoses.length > 0) {\r\n          const pose = detectedPoses[0]; // Use first detected pose\r\n          setCurrentPose(pose);\r\n          \r\n          // Draw skeleton\r\n          drawSkeleton(ctx, pose);\r\n\r\n          // Classify pose if model is loaded and classification is enabled\r\n          if (isModelLoaded && isClassifying && pose.score > 0.5) {\r\n            await classifyPose(pose);\r\n          }\r\n        } else {\r\n          setCurrentPose(null);\r\n          setPrediction(null);\r\n        }\r\n\r\n      } catch (error) {\r\n        console.error('Error detecting pose:', error);\r\n      }\r\n\r\n      animationId = requestAnimationFrame(detectAndClassify);\r\n    };\r\n\r\n    if (isDetecting) {\r\n      detectAndClassify();\r\n    }\r\n\r\n    return () => {\r\n      if (animationId) {\r\n        cancelAnimationFrame(animationId);\r\n      }\r\n    };\r\n  }, [poseNet, isDetecting, isModelLoaded, isClassifying]);\r\n\r\n  // Toggle classification\r\n  const toggleClassification = () => {\r\n    setIsClassifying(!isClassifying);\r\n    if (!isClassifying) {\r\n      addLog('Pose classification started');\r\n    } else {\r\n      addLog('Pose classification stopped');\r\n      setPrediction(null);\r\n    }\r\n  };\r\n\r\n  // Reset classification\r\n  const resetClassification = () => {\r\n    setPrediction(null);\r\n    addLog('Classification reset');\r\n  };\r\n\r\n  return (\r\n    <div className=\"component-container\">\r\n      <h2>Pose Testing</h2>\r\n      \r\n      <div className=\"status-display\">\r\n        <h3>Status</h3>\r\n        <p>Models: {isModelLoaded ? 'Loaded' : 'Not Found'}</p>\r\n        <p>Detection: {isDetecting ? 'Active' : 'Inactive'}</p>\r\n        <p>Classification: {isClassifying ? 'Active' : 'Inactive'}</p>\r\n        {currentPose && (\r\n          <p>Pose Confidence: {Math.round(currentPose.score * 100)}%</p>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"controls\">\r\n        {!isDetecting ? (\r\n          <button className=\"btn btn-primary\" onClick={startVideo}>\r\n            Start Detection\r\n          </button>\r\n        ) : (\r\n          <button className=\"btn btn-danger\" onClick={stopVideo}>\r\n            Stop Detection\r\n          </button>\r\n        )}\r\n        {isModelLoaded && (\r\n          <button \r\n            className={`btn ${isClassifying ? 'btn-danger' : 'btn-success'}`}\r\n            onClick={toggleClassification}\r\n            disabled={!isDetecting}\r\n          >\r\n            {isClassifying ? 'Stop Classification' : 'Start Classification'}\r\n          </button>\r\n        )}\r\n        <button \r\n          className=\"btn btn-secondary\" \r\n          onClick={resetClassification}\r\n          disabled={!isClassifying}\r\n        >\r\n          Reset\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"video-container\">\r\n        <video\r\n          ref={videoRef}\r\n          className=\"video-element\"\r\n          autoPlay\r\n          muted\r\n          playsInline\r\n        />\r\n        <canvas\r\n          ref={canvasRef}\r\n          className=\"canvas-overlay\"\r\n        />\r\n      </div>\r\n\r\n      {prediction && (\r\n        <div className=\"pose-info\">\r\n          <div className=\"pose-label\">\r\n            Detected: {prediction.label}\r\n          </div>\r\n          <div className=\"confidence-score\">\r\n            {Math.round(prediction.confidence * 100)}%\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {!isModelLoaded && (\r\n        <div className=\"status-display\">\r\n          <h3>No Trained Model Found</h3>\r\n          <p>Please go to the \"Pose Training\" tab to train a model first.</p>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"log-section\">\r\n        <h3>Activity Log</h3>\r\n        {logs.map((log, index) => (\r\n          <div key={index}>{log}</div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PoseTesting; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}