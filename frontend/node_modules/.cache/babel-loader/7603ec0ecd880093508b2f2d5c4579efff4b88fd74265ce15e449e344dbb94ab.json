{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tjoha\\\\Desktop\\\\cursor\\\\bjj-vision\\\\frontend\\\\src\\\\components\\\\PoseTraining.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PoseTraining = () => {\n  _s();\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [poseNet, setPoseNet] = useState(null);\n  const [neuralNetwork, setNeuralNetwork] = useState(null);\n  const [isModelLoaded, setIsModelLoaded] = useState(false);\n  const [isRecording, setIsRecording] = useState(false);\n  const [isTraining, setIsTraining] = useState(false);\n  const [poseLabel, setPoseLabel] = useState('');\n  const [trainingData, setTrainingData] = useState([]);\n  const [logs, setLogs] = useState([]);\n  const [currentPose, setCurrentPose] = useState(null);\n\n  // Initialize models\n  useEffect(() => {\n    const initModels = async () => {\n      try {\n        if (window.ml5) {\n          // Initialize MoveNet\n          const poseModel = await window.ml5.pose('MoveNet', {\n            modelType: 'lightning',\n            enableSmoothing: true,\n            enableTracking: true,\n            minPoseScore: 0.3\n          });\n          setPoseNet(poseModel);\n\n          // Initialize Neural Network\n          const nn = window.ml5.neuralNetwork({\n            task: 'classification',\n            debug: true\n          });\n          setNeuralNetwork(nn);\n          setIsModelLoaded(true);\n          addLog('Models loaded successfully');\n        }\n      } catch (error) {\n        console.error('Error loading models:', error);\n        addLog('Error loading models: ' + error);\n      }\n    };\n    initModels();\n  }, []);\n  const addLog = message => {\n    const timestamp = new Date().toLocaleTimeString();\n    setLogs(prev => [...prev, `[${timestamp}] ${message}`]);\n  };\n\n  // Start video stream\n  const startVideo = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          width: 640,\n          height: 480,\n          facingMode: 'user'\n        }\n      });\n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n        videoRef.current.play();\n        addLog('Video stream started');\n      }\n    } catch (error) {\n      console.error('Error accessing webcam:', error);\n      addLog('Error accessing webcam: ' + error);\n    }\n  };\n\n  // Stop video stream\n  const stopVideo = () => {\n    if (videoRef.current && videoRef.current.srcObject) {\n      const stream = videoRef.current.srcObject;\n      stream.getTracks().forEach(track => track.stop());\n      videoRef.current.srcObject = null;\n      addLog('Video stream stopped');\n    }\n  };\n\n  // Start recording pose samples\n  const startRecording = () => {\n    if (!poseLabel.trim()) {\n      alert('Please enter a pose label first');\n      return;\n    }\n    setIsRecording(true);\n    addLog(`Started recording samples for: ${poseLabel}`);\n  };\n\n  // Stop recording pose samples\n  const stopRecording = () => {\n    setIsRecording(false);\n    addLog(`Stopped recording. Total samples for ${poseLabel}: ${trainingData.filter(sample => sample.output === poseLabel).length}`);\n  };\n\n  // Draw skeleton on canvas\n  const drawSkeleton = (ctx, pose) => {\n    const keypoints = pose.keypoints;\n    const connections = [['nose', 'leftEye'], ['nose', 'rightEye'], ['leftEye', 'leftEar'], ['rightEye', 'rightEar'], ['leftShoulder', 'rightShoulder'], ['leftShoulder', 'leftElbow'], ['rightShoulder', 'rightElbow'], ['leftElbow', 'leftWrist'], ['rightElbow', 'rightWrist'], ['leftShoulder', 'leftHip'], ['rightShoulder', 'rightHip'], ['leftHip', 'rightHip'], ['leftHip', 'leftKnee'], ['rightHip', 'rightKnee'], ['leftKnee', 'leftAnkle'], ['rightKnee', 'rightAnkle']];\n\n    // Draw connections\n    ctx.strokeStyle = '#00ff00';\n    ctx.lineWidth = 2;\n    connections.forEach(([start, end]) => {\n      const startPoint = keypoints.find(kp => kp.name === start);\n      const endPoint = keypoints.find(kp => kp.name === end);\n      if (startPoint && endPoint && startPoint.score > 0.3 && endPoint.score > 0.3) {\n        ctx.beginPath();\n        ctx.moveTo(startPoint.x, startPoint.y);\n        ctx.lineTo(endPoint.x, endPoint.y);\n        ctx.stroke();\n      }\n    });\n\n    // Draw keypoints\n    keypoints.forEach(keypoint => {\n      if (keypoint.score > 0.3) {\n        ctx.fillStyle = keypoint.score > 0.7 ? '#ff0000' : '#ffaa00';\n        ctx.beginPath();\n        ctx.arc(keypoint.x, keypoint.y, 4, 0, 2 * Math.PI);\n        ctx.fill();\n      }\n    });\n  };\n\n  // Pose detection and recording loop\n  useEffect(() => {\n    let animationId;\n    const detectAndRecord = async () => {\n      if (!poseNet || !videoRef.current || !canvasRef.current) {\n        return;\n      }\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      if (!ctx || video.readyState !== 4) {\n        animationId = requestAnimationFrame(detectAndRecord);\n        return;\n      }\n\n      // Set canvas size\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n\n      // Clear canvas\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      try {\n        // Detect poses\n        const detectedPoses = await poseNet.predict(video);\n        if (detectedPoses.length > 0) {\n          const pose = detectedPoses[0]; // Use first detected pose\n          setCurrentPose(pose);\n\n          // Draw skeleton\n          drawSkeleton(ctx, pose);\n\n          // Record sample if recording\n          if (isRecording && pose.score > 0.5) {\n            const keypoints = pose.keypoints;\n            const input = keypoints.flatMap(kp => [kp.x, kp.y]); // Flatten to 34 values\n\n            const newSample = {\n              input,\n              output: poseLabel\n            };\n            setTrainingData(prev => [...prev, newSample]);\n          }\n        } else {\n          setCurrentPose(null);\n        }\n      } catch (error) {\n        console.error('Error detecting pose:', error);\n      }\n      animationId = requestAnimationFrame(detectAndRecord);\n    };\n    if (isModelLoaded) {\n      detectAndRecord();\n    }\n    return () => {\n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n    };\n  }, [poseNet, isModelLoaded, isRecording, poseLabel]);\n\n  // Train the neural network\n  const trainModel = async () => {\n    if (!neuralNetwork || trainingData.length === 0) {\n      alert('No training data available. Please record some poses first.');\n      return;\n    }\n    setIsTraining(true);\n    addLog('Starting model training...');\n    try {\n      // Add training data to neural network\n      trainingData.forEach((sample, index) => {\n        neuralNetwork.addData(sample.input, sample.output);\n        if (index % 10 === 0) {\n          addLog(`Added ${index + 1}/${trainingData.length} samples`);\n        }\n      });\n\n      // Train the model\n      neuralNetwork.normalizeData();\n      const trainingOptions = {\n        epochs: 50,\n        batchSize: 32\n      };\n      neuralNetwork.train(trainingOptions, epoch => {\n        if (epoch && epoch.logs) {\n          addLog(`Epoch ${epoch.epoch}: loss=${epoch.logs.loss.toFixed(4)}, accuracy=${epoch.logs.acc.toFixed(4)}`);\n        }\n      }, () => {\n        addLog('Training completed!');\n        setIsTraining(false);\n\n        // Save model\n        neuralNetwork.save('bjj-pose-model', () => {\n          addLog('Model saved successfully');\n        });\n      });\n    } catch (error) {\n      console.error('Error training model:', error);\n      addLog('Error training model: ' + error);\n      setIsTraining(false);\n    }\n  };\n\n  // Clear training data\n  const clearData = () => {\n    setTrainingData([]);\n    addLog('Training data cleared');\n  };\n\n  // Get sample counts by label\n  const getSampleCounts = () => {\n    const counts = {};\n    trainingData.forEach(sample => {\n      counts[sample.output] = (counts[sample.output] || 0) + 1;\n    });\n    return counts;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"component-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Pose Training\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-display\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Models: \", isModelLoaded ? 'Loaded' : 'Loading...']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Recording: \", isRecording ? 'Active' : 'Inactive']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Training: \", isTraining ? 'In Progress' : 'Idle']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total Samples: \", trainingData.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"poseLabel\",\n        children: \"Pose Label:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"poseLabel\",\n        type: \"text\",\n        value: poseLabel,\n        onChange: e => setPoseLabel(e.target.value),\n        placeholder: \"e.g., Armbar, Triangle Choke, Guard Pass\",\n        disabled: isRecording\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: startVideo,\n        children: \"Start Video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary\",\n        onClick: stopVideo,\n        children: \"Stop Video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 9\n      }, this), !isRecording ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-success\",\n        onClick: startRecording,\n        disabled: !poseLabel.trim() || !isModelLoaded,\n        children: \"Start Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-danger\",\n        onClick: stopRecording,\n        children: \"Stop Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: trainModel,\n        disabled: trainingData.length === 0 || isTraining,\n        children: isTraining ? 'Training...' : 'Train Model'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary\",\n        onClick: clearData,\n        children: \"Clear Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: videoRef,\n        className: \"video-element\",\n        autoPlay: true,\n        muted: true,\n        playsInline: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        className: \"canvas-overlay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 7\n    }, this), currentPose && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-display\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Current Pose\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Confidence: \", Math.round(currentPose.score * 100), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Keypoints: \", currentPose.keypoints.filter(kp => kp.score > 0.3).length, \"/\", currentPose.keypoints.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 9\n    }, this), Object.keys(getSampleCounts()).length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-display\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Training Data Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 11\n      }, this), Object.entries(getSampleCounts()).map(([label, count]) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [label, \": \", count, \" samples\"]\n      }, label, true, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"log-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Training Log\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 9\n      }, this), logs.map((log, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: log\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 301,\n    columnNumber: 5\n  }, this);\n};\n_s(PoseTraining, \"qzleJLS0PcuI5qbSeRs2lBD0Mu0=\");\n_c = PoseTraining;\nexport default PoseTraining;\nvar _c;\n$RefreshReg$(_c, \"PoseTraining\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","PoseTraining","_s","videoRef","canvasRef","poseNet","setPoseNet","neuralNetwork","setNeuralNetwork","isModelLoaded","setIsModelLoaded","isRecording","setIsRecording","isTraining","setIsTraining","poseLabel","setPoseLabel","trainingData","setTrainingData","logs","setLogs","currentPose","setCurrentPose","initModels","window","ml5","poseModel","pose","modelType","enableSmoothing","enableTracking","minPoseScore","nn","task","debug","addLog","error","console","message","timestamp","Date","toLocaleTimeString","prev","startVideo","stream","navigator","mediaDevices","getUserMedia","video","width","height","facingMode","current","srcObject","play","stopVideo","getTracks","forEach","track","stop","startRecording","trim","alert","stopRecording","filter","sample","output","length","drawSkeleton","ctx","keypoints","connections","strokeStyle","lineWidth","start","end","startPoint","find","kp","name","endPoint","score","beginPath","moveTo","x","y","lineTo","stroke","keypoint","fillStyle","arc","Math","PI","fill","animationId","detectAndRecord","canvas","getContext","readyState","requestAnimationFrame","videoWidth","videoHeight","clearRect","detectedPoses","predict","input","flatMap","newSample","cancelAnimationFrame","trainModel","index","addData","normalizeData","trainingOptions","epochs","batchSize","train","epoch","loss","toFixed","acc","save","clearData","getSampleCounts","counts","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","type","value","onChange","e","target","placeholder","disabled","onClick","ref","autoPlay","muted","playsInline","round","Object","keys","entries","map","label","count","log","_c","$RefreshReg$"],"sources":["C:/Users/tjoha/Desktop/cursor/bjj-vision/frontend/src/components/PoseTraining.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\n\r\ninterface TrainingSample {\r\n  input: number[];\r\n  output: string;\r\n}\r\n\r\ninterface PoseKeypoint {\r\n  x: number;\r\n  y: number;\r\n  score: number;\r\n  name: string;\r\n}\r\n\r\ninterface Pose {\r\n  keypoints: PoseKeypoint[];\r\n  score: number;\r\n}\r\n\r\ndeclare global {\r\n  interface Window {\r\n    ml5: any;\r\n  }\r\n}\r\n\r\nconst PoseTraining: React.FC = () => {\r\n  const videoRef = useRef<HTMLVideoElement>(null);\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const [poseNet, setPoseNet] = useState<any>(null);\r\n  const [neuralNetwork, setNeuralNetwork] = useState<any>(null);\r\n  const [isModelLoaded, setIsModelLoaded] = useState(false);\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [isTraining, setIsTraining] = useState(false);\r\n  const [poseLabel, setPoseLabel] = useState('');\r\n  const [trainingData, setTrainingData] = useState<TrainingSample[]>([]);\r\n  const [logs, setLogs] = useState<string[]>([]);\r\n  const [currentPose, setCurrentPose] = useState<Pose | null>(null);\r\n\r\n  // Initialize models\r\n  useEffect(() => {\r\n    const initModels = async () => {\r\n      try {\r\n        if (window.ml5) {\r\n          // Initialize MoveNet\r\n          const poseModel = await window.ml5.pose('MoveNet', {\r\n            modelType: 'lightning',\r\n            enableSmoothing: true,\r\n            enableTracking: true,\r\n            minPoseScore: 0.3\r\n          });\r\n          setPoseNet(poseModel);\r\n\r\n          // Initialize Neural Network\r\n          const nn = window.ml5.neuralNetwork({\r\n            task: 'classification',\r\n            debug: true\r\n          });\r\n          setNeuralNetwork(nn);\r\n          setIsModelLoaded(true);\r\n          addLog('Models loaded successfully');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading models:', error);\r\n        addLog('Error loading models: ' + error);\r\n      }\r\n    };\r\n\r\n    initModels();\r\n  }, []);\r\n\r\n  const addLog = (message: string) => {\r\n    const timestamp = new Date().toLocaleTimeString();\r\n    setLogs(prev => [...prev, `[${timestamp}] ${message}`]);\r\n  };\r\n\r\n  // Start video stream\r\n  const startVideo = async () => {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({\r\n        video: {\r\n          width: 640,\r\n          height: 480,\r\n          facingMode: 'user'\r\n        }\r\n      });\r\n      \r\n      if (videoRef.current) {\r\n        videoRef.current.srcObject = stream;\r\n        videoRef.current.play();\r\n        addLog('Video stream started');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error accessing webcam:', error);\r\n      addLog('Error accessing webcam: ' + error);\r\n    }\r\n  };\r\n\r\n  // Stop video stream\r\n  const stopVideo = () => {\r\n    if (videoRef.current && videoRef.current.srcObject) {\r\n      const stream = videoRef.current.srcObject as MediaStream;\r\n      stream.getTracks().forEach(track => track.stop());\r\n      videoRef.current.srcObject = null;\r\n      addLog('Video stream stopped');\r\n    }\r\n  };\r\n\r\n  // Start recording pose samples\r\n  const startRecording = () => {\r\n    if (!poseLabel.trim()) {\r\n      alert('Please enter a pose label first');\r\n      return;\r\n    }\r\n    setIsRecording(true);\r\n    addLog(`Started recording samples for: ${poseLabel}`);\r\n  };\r\n\r\n  // Stop recording pose samples\r\n  const stopRecording = () => {\r\n    setIsRecording(false);\r\n    addLog(`Stopped recording. Total samples for ${poseLabel}: ${trainingData.filter(sample => sample.output === poseLabel).length}`);\r\n  };\r\n\r\n  // Draw skeleton on canvas\r\n  const drawSkeleton = (ctx: CanvasRenderingContext2D, pose: Pose) => {\r\n    const keypoints = pose.keypoints;\r\n    \r\n    const connections = [\r\n      ['nose', 'leftEye'], ['nose', 'rightEye'],\r\n      ['leftEye', 'leftEar'], ['rightEye', 'rightEar'],\r\n      ['leftShoulder', 'rightShoulder'],\r\n      ['leftShoulder', 'leftElbow'], ['rightShoulder', 'rightElbow'],\r\n      ['leftElbow', 'leftWrist'], ['rightElbow', 'rightWrist'],\r\n      ['leftShoulder', 'leftHip'], ['rightShoulder', 'rightHip'],\r\n      ['leftHip', 'rightHip'],\r\n      ['leftHip', 'leftKnee'], ['rightHip', 'rightKnee'],\r\n      ['leftKnee', 'leftAnkle'], ['rightKnee', 'rightAnkle']\r\n    ];\r\n\r\n    // Draw connections\r\n    ctx.strokeStyle = '#00ff00';\r\n    ctx.lineWidth = 2;\r\n    \r\n    connections.forEach(([start, end]) => {\r\n      const startPoint = keypoints.find(kp => kp.name === start);\r\n      const endPoint = keypoints.find(kp => kp.name === end);\r\n      \r\n      if (startPoint && endPoint && startPoint.score > 0.3 && endPoint.score > 0.3) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(startPoint.x, startPoint.y);\r\n        ctx.lineTo(endPoint.x, endPoint.y);\r\n        ctx.stroke();\r\n      }\r\n    });\r\n\r\n    // Draw keypoints\r\n    keypoints.forEach(keypoint => {\r\n      if (keypoint.score > 0.3) {\r\n        ctx.fillStyle = keypoint.score > 0.7 ? '#ff0000' : '#ffaa00';\r\n        ctx.beginPath();\r\n        ctx.arc(keypoint.x, keypoint.y, 4, 0, 2 * Math.PI);\r\n        ctx.fill();\r\n      }\r\n    });\r\n  };\r\n\r\n  // Pose detection and recording loop\r\n  useEffect(() => {\r\n    let animationId: number;\r\n\r\n    const detectAndRecord = async () => {\r\n      if (!poseNet || !videoRef.current || !canvasRef.current) {\r\n        return;\r\n      }\r\n\r\n      const video = videoRef.current;\r\n      const canvas = canvasRef.current;\r\n      const ctx = canvas.getContext('2d');\r\n\r\n      if (!ctx || video.readyState !== 4) {\r\n        animationId = requestAnimationFrame(detectAndRecord);\r\n        return;\r\n      }\r\n\r\n      // Set canvas size\r\n      canvas.width = video.videoWidth;\r\n      canvas.height = video.videoHeight;\r\n\r\n      // Clear canvas\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n      try {\r\n        // Detect poses\r\n        const detectedPoses = await poseNet.predict(video);\r\n        \r\n        if (detectedPoses.length > 0) {\r\n          const pose = detectedPoses[0]; // Use first detected pose\r\n          setCurrentPose(pose);\r\n          \r\n          // Draw skeleton\r\n          drawSkeleton(ctx, pose);\r\n\r\n          // Record sample if recording\r\n          if (isRecording && pose.score > 0.5) {\r\n            const keypoints = pose.keypoints as PoseKeypoint[];\r\n            const input = keypoints.flatMap(kp => [kp.x, kp.y]); // Flatten to 34 values\r\n            \r\n            const newSample: TrainingSample = {\r\n              input,\r\n              output: poseLabel\r\n            };\r\n            \r\n            setTrainingData(prev => [...prev, newSample]);\r\n          }\r\n        } else {\r\n          setCurrentPose(null);\r\n        }\r\n\r\n      } catch (error) {\r\n        console.error('Error detecting pose:', error);\r\n      }\r\n\r\n      animationId = requestAnimationFrame(detectAndRecord);\r\n    };\r\n\r\n    if (isModelLoaded) {\r\n      detectAndRecord();\r\n    }\r\n\r\n    return () => {\r\n      if (animationId) {\r\n        cancelAnimationFrame(animationId);\r\n      }\r\n    };\r\n  }, [poseNet, isModelLoaded, isRecording, poseLabel]);\r\n\r\n  // Train the neural network\r\n  const trainModel = async () => {\r\n    if (!neuralNetwork || trainingData.length === 0) {\r\n      alert('No training data available. Please record some poses first.');\r\n      return;\r\n    }\r\n\r\n    setIsTraining(true);\r\n    addLog('Starting model training...');\r\n\r\n    try {\r\n      // Add training data to neural network\r\n      trainingData.forEach((sample, index) => {\r\n        neuralNetwork.addData(sample.input, sample.output);\r\n        if (index % 10 === 0) {\r\n          addLog(`Added ${index + 1}/${trainingData.length} samples`);\r\n        }\r\n      });\r\n\r\n      // Train the model\r\n      neuralNetwork.normalizeData();\r\n      \r\n      const trainingOptions = {\r\n        epochs: 50,\r\n        batchSize: 32\r\n      };\r\n\r\n      neuralNetwork.train(trainingOptions, (epoch: any) => {\r\n        if (epoch && epoch.logs) {\r\n          addLog(`Epoch ${epoch.epoch}: loss=${epoch.logs.loss.toFixed(4)}, accuracy=${epoch.logs.acc.toFixed(4)}`);\r\n        }\r\n      }, () => {\r\n        addLog('Training completed!');\r\n        setIsTraining(false);\r\n        \r\n        // Save model\r\n        neuralNetwork.save('bjj-pose-model', () => {\r\n          addLog('Model saved successfully');\r\n        });\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('Error training model:', error);\r\n      addLog('Error training model: ' + error);\r\n      setIsTraining(false);\r\n    }\r\n  };\r\n\r\n  // Clear training data\r\n  const clearData = () => {\r\n    setTrainingData([]);\r\n    addLog('Training data cleared');\r\n  };\r\n\r\n  // Get sample counts by label\r\n  const getSampleCounts = () => {\r\n    const counts: { [key: string]: number } = {};\r\n    trainingData.forEach(sample => {\r\n      counts[sample.output] = (counts[sample.output] || 0) + 1;\r\n    });\r\n    return counts;\r\n  };\r\n\r\n  return (\r\n    <div className=\"component-container\">\r\n      <h2>Pose Training</h2>\r\n      \r\n      <div className=\"status-display\">\r\n        <h3>Status</h3>\r\n        <p>Models: {isModelLoaded ? 'Loaded' : 'Loading...'}</p>\r\n        <p>Recording: {isRecording ? 'Active' : 'Inactive'}</p>\r\n        <p>Training: {isTraining ? 'In Progress' : 'Idle'}</p>\r\n        <p>Total Samples: {trainingData.length}</p>\r\n      </div>\r\n\r\n      <div className=\"input-group\">\r\n        <label htmlFor=\"poseLabel\">Pose Label:</label>\r\n        <input\r\n          id=\"poseLabel\"\r\n          type=\"text\"\r\n          value={poseLabel}\r\n          onChange={(e) => setPoseLabel(e.target.value)}\r\n          placeholder=\"e.g., Armbar, Triangle Choke, Guard Pass\"\r\n          disabled={isRecording}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"controls\">\r\n        <button className=\"btn btn-primary\" onClick={startVideo}>\r\n          Start Video\r\n        </button>\r\n        <button className=\"btn btn-secondary\" onClick={stopVideo}>\r\n          Stop Video\r\n        </button>\r\n        {!isRecording ? (\r\n          <button \r\n            className=\"btn btn-success\" \r\n            onClick={startRecording}\r\n            disabled={!poseLabel.trim() || !isModelLoaded}\r\n          >\r\n            Start Recording\r\n          </button>\r\n        ) : (\r\n          <button className=\"btn btn-danger\" onClick={stopRecording}>\r\n            Stop Recording\r\n          </button>\r\n        )}\r\n        <button \r\n          className=\"btn btn-primary\" \r\n          onClick={trainModel}\r\n          disabled={trainingData.length === 0 || isTraining}\r\n        >\r\n          {isTraining ? 'Training...' : 'Train Model'}\r\n        </button>\r\n        <button className=\"btn btn-secondary\" onClick={clearData}>\r\n          Clear Data\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"video-container\">\r\n        <video\r\n          ref={videoRef}\r\n          className=\"video-element\"\r\n          autoPlay\r\n          muted\r\n          playsInline\r\n        />\r\n        <canvas\r\n          ref={canvasRef}\r\n          className=\"canvas-overlay\"\r\n        />\r\n      </div>\r\n\r\n      {currentPose && (\r\n        <div className=\"status-display\">\r\n          <h3>Current Pose</h3>\r\n          <p>Confidence: {Math.round(currentPose.score * 100)}%</p>\r\n          <p>Keypoints: {currentPose.keypoints.filter(kp => kp.score > 0.3).length}/{currentPose.keypoints.length}</p>\r\n        </div>\r\n      )}\r\n\r\n      {Object.keys(getSampleCounts()).length > 0 && (\r\n        <div className=\"status-display\">\r\n          <h3>Training Data Summary</h3>\r\n          {Object.entries(getSampleCounts()).map(([label, count]) => (\r\n            <p key={label}>{label}: {count} samples</p>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"log-section\">\r\n        <h3>Training Log</h3>\r\n        {logs.map((log, index) => (\r\n          <div key={index}>{log}</div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PoseTraining; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}